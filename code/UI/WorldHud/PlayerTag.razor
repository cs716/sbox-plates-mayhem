@namespace PlatesGame.UI
@using System
@using Sandbox
@using Sandbox.UI
@inherits BaseEntityWorldPanel 

@attribute [StyleSheet]

@if ( Entity is not PlatesPlayer player || !player.IsValid() )
{
	return;
}

<root>
	@if ( PlatesGame.EventDetails.AffectedEntities.Contains( player ))
	{
		<label @ref="ImpactedLabel" style="color: yellow;" class="ImpactedLabel">expand_more</label>
	}
	<div class="panel-inner" @ref="UserDetails">
		@if ( !player.IsLocalPawn )
		{
			<label class="name">@Player.Client.Name</label>
		}
		
		<div @ref="HealthBar" class="healthbar">
			<div @ref="HealthInner" class="inner"></div>
		</div>
	</div>

</root>

@code {
	
	private Panel HealthInner { get; set; }
	private Panel HealthBar { get; set; }
	private Panel UserDetails { get; set; }

	private PlatesPlayer Player => Entity as PlatesPlayer;

	private RealTimeSince OwnHealthBarChanged;
	private float _lastHealth;

	private Label ImpactedLabel { get; set; }

	public PlayerTag( PlatesPlayer player ) : base( player, Vector3.Up * 85f )
	{
		PanelBounds = new Rect( -1000, -1000, 2000, 2000 );
	}
	
	protected override int BuildHash()
	{
		return HashCode.Combine(HealthBar.Style.Opacity, PlatesGame.EventDetails.LastUpdate, Player?.Name, Player?.Health, Player?.LifeState.ToString(), Style.Display.ToString());
	}

	public override void Tick()
	{
		base.Tick();

		if ( !IsValid || Player.LifeState != LifeState.Alive )
			return;

		if ( Position.Distance( Camera.Position ) >= 1500f )
		{
			UserDetails.Style.Display = DisplayMode.None;
			return;
		}
		
		if (UserDetails.Style.Display != DisplayMode.Flex)
		{
			UserDetails.Style.Display = DisplayMode.Flex;
		}
		
		HealthInner.Style.Width = Length.Percent( Player.Health );
		HealthInner.Style.BackgroundColor = Player.Health switch
		{
			>= 51 => Color.Green,
			>= 25 and <= 50 => Color.Yellow,
			_ => Color.Red
			};
		Style.Display = (Game.LocalPawn.LifeState == LifeState.Alive) ? DisplayMode.Flex : DisplayMode.None;

		if ( !_lastHealth.AlmostEqual( Player.Health ) )
		{
			_lastHealth = Player.Health;
			OwnHealthBarChanged = 0;
		}

		HealthBar.Style.Opacity = !Player.IsLocalPawn || OwnHealthBarChanged < 5f ? 1 : 0;
	}

}
