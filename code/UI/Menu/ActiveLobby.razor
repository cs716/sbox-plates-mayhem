@using Sandbox;
@using System;
@using System.Linq;
@using System.Threading.Tasks;
@using Sandbox.Menu;
@using Sandbox.UI;

<root>
    <label class="game-title">
        @Game.Menu.Package.Title
    </label>

    @if ( Lobby == null ) 
    {
        <div class="controls">
            <a class="button">Loading...</a>

            <a class="button" href="/lobby/list">Return</a>
        </div>
    }
    else
    {

        <div class="controls">
            <div class="col">
                <label>Members (@Lobby.MemberCount/@Lobby.MaxMembers)</label>

                <div class="span">
                    @foreach (var member in Lobby.Members)
                    {
                        <img class="avatar" src="avatar:@member.Id" tooltip="@member.Name" />
                    }
                </div>
            </div>

           @if ( Lobby.Owner.IsMe )
            {
                <div class="span">
	                <FormGroup class="form-group">
		                <Label>Maximum Players</Label>
		                <Control>
			                <SliderControl ShowRange=@true Min=@(2f) Max=@MaxPlayersSupported Value:bind=@Game.Menu.Lobby.MaxMembers />
		                </Control>
	                </FormGroup>
                </div>
            }
			
           @if ( Lobby.Owner.IsMe )
           {
	           <a class="button" @onclick=@Start>Start</a>
           }
           else
           {
	           //<a class="button" @onclick=@Ready>Ready Up</a>
           }

           <div class="spacer" />
            <a class="button" @onclick=@LeaveLobby>Leave Lobby</a>
        </div>
    }
</root>

@code
{
    Friend Owner => Lobby.Owner;
    ILobby Lobby => Game.Menu.Lobby;

    int MaxPlayersSupported { get; set; } = 1;
    Package MapPackage { get; set; }

    public void LeaveLobby()
    {
        Lobby?.Leave();
    }

	[GameEvent.Menu.LobbyLeave]
	public void LobbyLeft()
	{
		this.Navigate( "/lobby/list" );
	}

    async Task Start()
    {
        await Game.Menu.StartServerAsync( Game.Menu.Lobby.MaxMembers, $"{Game.Menu.Lobby.Owner.Name}'s game", "csdev.pl8_empty" );
    }

	void Ready()
	{
		Lobby.SetData( $"ready_{Game.SteamId}", "true" );
	}

	void UnReady()
	{
		Lobby.SetData( $"ready_{Game.SteamId}", "false" );
	}

    protected override void OnParametersSet()
    {
        MaxPlayersSupported = Game.Menu.Package.GetMeta<int>( "MaxPlayers", 2 );
    }
}
